// middlewares/spamProtection.js
import { formatResponse, getClientIP } from "../utils/helpers.js";
import { logSecurityEvent } from "./logger.js";

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const spamKeywords = [
  // –û–±—â–∏–π —Å–ø–∞–º
  "viagra",
  "casino",
  "lottery",
  "winner",
  "congratulations",
  "free money",
  "make money fast",
  "get rich quick",
  "click here",
  "limited time",
  "act now",
  "urgent",
  "100% free",
  "no cost",

  // –°—Å—ã–ª–∫–∏ –∏ —Ä–µ–∫–ª–∞–º–∞
  "buy now",
  "discount",
  "offer expires",
  "special promotion",
  "earn money",
  "work from home",
  "business opportunity",

  // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  "‚Çø",
  "üí∞",
  "üöÄ",
  "üìà",
  "üíé",
  "üî•",
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫
const linkPatterns = [
  /https?:\/\/[^\s]+/gi,
  /www\.[^\s]+/gi,
  /[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\.[a-zA-Z]{2,}/gi,
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
const suspiciousPatterns = [
  /(.)\1{4,}/g, // –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã (aaaaa, !!!!!!)
  /[A-Z]{5,}/g, // –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –ø–æ–¥—Ä—è–¥
  /\d{10,}/g, // –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–∞ (—Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Ç.–¥.)
  /[!@#$%^&*]{3,}/g, // –º–Ω–æ–≥–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –ø–æ–¥—Ä—è–¥
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
const containsSpamKeywords = (text) => {
  const lowerText = text.toLowerCase();
  return spamKeywords.some((keyword) => lowerText.includes(keyword));
};

// –ü–æ–¥—Å—á–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
const countLinks = (text) => {
  let linkCount = 0;
  linkPatterns.forEach((pattern) => {
    const matches = text.match(pattern);
    if (matches) linkCount += matches.length;
  });
  return linkCount;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
const hasSuspiciousPatterns = (text) => {
  return suspiciousPatterns.some((pattern) => pattern.test(text));
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ø–∞–º-—Å–∫–æ—Ä–∞
const calculateSpamScore = (text, title = "") => {
  let score = 0;
  const combinedText = `${title} ${text}`.toLowerCase();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (+20 –∑–∞ –∫–∞–∂–¥–æ–µ)
  const keywordMatches = spamKeywords.filter((keyword) =>
    combinedText.includes(keyword)
  );
  score += keywordMatches.length * 20;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ (+15 –∑–∞ –∫–∞–∂–¥—É—é, –Ω–æ –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ +5)
  const linkCount = countLinks(combinedText);
  if (linkCount > 0) {
    score += 5 + (linkCount - 1) * 15;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (+10 –∑–∞ –∫–∞–∂–¥—ã–π)
  const suspiciousCount = suspiciousPatterns.filter((pattern) =>
    pattern.test(combinedText)
  ).length;
  score += suspiciousCount * 10;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∑–∞–≥–ª–∞–≤–Ω—ã—Ö/—Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤
  const upperCaseCount = (combinedText.match(/[A-Z]/g) || []).length;
  const totalLetters = (combinedText.match(/[a-zA-Z]/g) || []).length;
  if (totalLetters > 10 && upperCaseCount / totalLetters > 0.7) {
    score += 15; // –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ vs –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
  if (text.length < 100 && linkCount > 0) {
    score += 10; // –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª–µ–Ω
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
  const repeatingChars = text.match(/(.)\1{3,}/g);
  if (repeatingChars && repeatingChars.length > 2) {
    score += 15;
  }

  return score;
};

// –û—Å–Ω–æ–≤–Ω–æ–π middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
export const checkSpam = (options = {}) => {
  const {
    threshold = 30, // –ø–æ—Ä–æ–≥ —Å–ø–∞–º-—Å–∫–æ—Ä–∞
    checkTitle = true, // –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    checkContent = true, // –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
    allowForExperts = true, // —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞–º –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥—ã
    blockHighScore = 80, // –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–∫–æ—Ä–µ
  } = options;

  return (req, res, next) => {
    try {
      let textToCheck = "";
      let titleToCheck = "";

      // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
      if (checkTitle && req.body.title) {
        titleToCheck = req.body.title;
        textToCheck += titleToCheck;
      }

      if (checkContent && req.body.content) {
        textToCheck += " " + req.body.content;
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (!textToCheck.trim()) {
        return next();
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å–ø–∞–º-—Å–∫–æ—Ä
      const spamScore = calculateSpamScore(textToCheck, titleToCheck);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let effectiveThreshold = threshold;
      if (allowForExperts && req.user && req.user.isExpert) {
        effectiveThreshold = threshold + 20; // —ç–∫—Å–ø–µ—Ä—Ç—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–µ —Å–≤–æ–±–æ–¥—ã
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞–º-—Å–∫–æ—Ä–µ –≤ –∑–∞–ø—Ä–æ—Å
      req.spamScore = spamScore;
      req.spamInfo = {
        score: spamScore,
        threshold: effectiveThreshold,
        isSpam: spamScore >= effectiveThreshold,
        isHighRisk: spamScore >= blockHighScore,
      };

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      if (spamScore >= threshold / 2) {
        logSecurityEvent(
          "SPAM_DETECTED",
          `Potential spam detected: score ${spamScore}, text: "${textToCheck.substring(
            0,
            100
          )}..."`,
          req.user?._id,
          getClientIP(req)
        );
      }

      // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—á–µ–Ω—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      if (spamScore >= blockHighScore) {
        logSecurityEvent(
          "HIGH_SPAM_BLOCKED",
          `High spam score blocked: ${spamScore}, user: ${req.user?._id}`,
          req.user?._id,
          getClientIP(req)
        );

        return res.status(400).json(
          formatResponse(
            false,
            null,
            "–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞",
            {
              type: "SPAM_BLOCKED",
              spamScore: spamScore,
              reasons:
                spamScore >= 80 ? ["High spam score"] : ["Suspicious content"],
            }
          )
        );
      }

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
      if (spamScore >= effectiveThreshold) {
        logSecurityEvent(
          "SPAM_WARNING",
          `Spam warning: score ${spamScore}, proceeding with caution`,
          req.user?._id,
          getClientIP(req)
        );

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        req.needsModeration = true;
      }

      next();
    } catch (error) {
      console.error("Spam protection error:", error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      next();
    }
  };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export const checkDuplicateContent = (Model, field = "content") => {
  return async (req, res, next) => {
    try {
      if (!req.body[field]) {
        return next();
      }

      const contentHash = Buffer.from(req.body[field]).toString("base64");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
      if (req.user) {
        const recentContent = await Model.find({
          author: req.user._id,
          createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }, // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        }).limit(10);

        const isDuplicate = recentContent.some((item) => {
          const itemHash = Buffer.from(item[field]).toString("base64");
          return itemHash === contentHash;
        });

        if (isDuplicate) {
          logSecurityEvent(
            "DUPLICATE_CONTENT_BLOCKED",
            `Duplicate content blocked for user ${req.user._id}`,
            req.user._id,
            getClientIP(req)
          );

          return res.status(400).json(
            formatResponse(
              false,
              null,
              "–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç.",
              {
                type: "DUPLICATE_CONTENT",
                message:
                  "–í—ã —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∏ –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 24 —á–∞—Å–æ–≤",
              }
            )
          );
        }
      }

      next();
    } catch (error) {
      console.error("Duplicate content check error:", error);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      next();
    }
  };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
export const checkPostingFrequency = (windowMs = 60000, maxPosts = 3) => {
  const userPosts = new Map(); // –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏

  return (req, res, next) => {
    if (!req.user) {
      return next();
    }

    const userId = req.user._id.toString();
    const now = Date.now();

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userPosts.has(userId)) {
      userPosts.set(userId, []);
    }

    const posts = userPosts.get(userId);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    const recentPosts = posts.filter((timestamp) => now - timestamp < windowMs);

    if (recentPosts.length >= maxPosts) {
      logSecurityEvent(
        "POSTING_FREQUENCY_LIMITED",
        `Posting frequency limit exceeded: ${recentPosts.length}/${maxPosts} in ${windowMs}ms`,
        req.user._id,
        getClientIP(req)
      );

      return res.status(429).json(
        formatResponse(
          false,
          null,
          `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ú–∞–∫—Å–∏–º—É–º ${maxPosts} –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –º–∏–Ω—É—Ç—É.`,
          {
            type: "POSTING_FREQUENCY_LIMITED",
            current: recentPosts.length,
            max: maxPosts,
            resetAfter: Math.ceil((recentPosts[0] + windowMs - now) / 1000),
          }
        )
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
    recentPosts.push(now);
    userPosts.set(userId, recentPosts);

    next();
  };
};

export default {
  checkSpam,
  checkDuplicateContent,
  checkPostingFrequency,
};
