// scripts/createAdmin.js
import mongoose from "mongoose";
import dotenv from "dotenv";
import User from "../models/User.js";
import RoleChange from "../models/RoleChange.js";
import { USER_ROLES } from "../utils/constants.js";
import { logRoleChange } from "../middlewares/logger.js";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const createSuperAdmin = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB");

    // –î–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã)
    const adminData = {
      email: process.env.ADMIN_EMAIL || "admin@fastcredit.sk",
      username: process.env.ADMIN_USERNAME || "superadmin",
      firstName: "Super",
      lastName: "Admin",
      role: USER_ROLES.ADMIN,
      isActive: true,
      isEmailVerified: true,
      isFirstLogin: false,
      canModerate: true,
      bio: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–æ—Ä—É–º–∞",
      createdAt: new Date(),
      roleChangedAt: new Date(),
      roleChangedBy: null, // –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º email
    const existingAdmin = await User.findOne({ email: adminData.email });

    if (existingAdmin) {
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${adminData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω - –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–æ–º
      if (existingAdmin.role !== USER_ROLES.ADMIN) {
        const oldRole = existingAdmin.role;
        existingAdmin.role = USER_ROLES.ADMIN;
        existingAdmin.roleChangedAt = new Date();
        existingAdmin.canModerate = true;

        await existingAdmin.save();

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await RoleChange.logRoleChange(
          existingAdmin._id,
          oldRole,
          USER_ROLES.ADMIN,
          null, // —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
          "Promoted to super admin via seed script"
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        logRoleChange(
          existingAdmin._id,
          oldRole,
          USER_ROLES.ADMIN,
          "SYSTEM_SEED"
        );

        console.log(
          `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${adminData.email} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
        );
        console.log(`üìß Email: ${existingAdmin.email}`);
        console.log(`üë§ Username: ${existingAdmin.username}`);
        console.log(`üîë ID: ${existingAdmin._id}`);
      } else {
        console.log(
          `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${adminData.email} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
        );
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      const newAdmin = new User(adminData);
      await newAdmin.save();

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–æ–ª–µ–π
      await RoleChange.logRoleChange(
        newAdmin._id,
        null, // –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–æ–ª–∏
        USER_ROLES.ADMIN,
        null, // —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        "Initial super admin creation via seed script"
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
      logRoleChange(newAdmin._id, "none", USER_ROLES.ADMIN, "SYSTEM_SEED");

      console.log("üéâ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
      console.log(`üìß Email: ${newAdmin.email}`);
      console.log(`üë§ Username: ${newAdmin.username}`);
      console.log(`üîë ID: ${newAdmin._id}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminCount = await User.countDocuments({ role: USER_ROLES.ADMIN });
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:", error.message);
    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await mongoose.connection.close();
    console.log("üì¶ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ");
    process.exit(0);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createSuperAdmin();
