// scripts/createAdmin.js
import mongoose from "mongoose";
import dotenv from "dotenv";
import User from "../models/User.js";
import { USER_ROLES } from "../utils/constants.js";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const createSuperAdmin = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await mongoose.connect(process.env.MONGODB_URI);
    console.log("üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB");

    // –î–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const adminData = {
      email: process.env.ADMIN_EMAIL || "admin@fastcredit.sk",
      password: process.env.ADMIN_PASSWORD || "admin123456", // –ë—É–¥–µ—Ç –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      username: process.env.ADMIN_USERNAME || "superadmin",
      firstName: process.env.ADMIN_FIRST_NAME || "Super",
      lastName: process.env.ADMIN_LAST_NAME || "Admin",
      provider: "local", // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      role: USER_ROLES.ADMIN,
      isActive: true,
      isEmailVerified: true, // –ê–¥–º–∏–Ω —Å—Ä–∞–∑—É –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
      isVerified: true, // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      bio: "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ñ–æ—Ä—É–º–∞",
      roleChangedAt: new Date(),
      roleChangedBy: null, // –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω —Å —Ç–∞–∫–∏–º email
    const existingAdmin = await User.findOne({ email: adminData.email });

    if (existingAdmin) {
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${adminData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω - –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–¥–º–∏–Ω–æ–º
      if (existingAdmin.role !== USER_ROLES.ADMIN) {
        const oldRole = existingAdmin.role;
        existingAdmin.role = USER_ROLES.ADMIN;
        existingAdmin.roleChangedAt = new Date();
        existingAdmin.isActive = true;
        existingAdmin.isEmailVerified = true;
        existingAdmin.isVerified = true;

        await existingAdmin.save();

        console.log(
          `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${adminData.email} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`
        );
        console.log(`üìß Email: ${existingAdmin.email}`);
        console.log(`üë§ Username: ${existingAdmin.username}`);
        console.log(`üÜî ID: ${existingAdmin._id}`);
        console.log(`üîÑ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞: ${oldRole} -> ${USER_ROLES.ADMIN}`);
      } else {
        console.log(
          `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${adminData.email} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`
        );
        console.log(`üìß Email: ${existingAdmin.email}`);
        console.log(`üë§ Username: ${existingAdmin.username}`);
        console.log(`üÜî ID: ${existingAdmin._id}`);
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      const newAdmin = new User(adminData);
      await newAdmin.save();

      console.log("üéâ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
      console.log(`üìß Email: ${newAdmin.email}`);
      console.log(`üë§ Username: ${newAdmin.username || "–Ω–µ —É–∫–∞–∑–∞–Ω"}`);
      console.log(`üÜî ID: ${newAdmin._id}`);
      console.log(`üîë –ü–∞—Ä–æ–ª—å: ${process.env.ADMIN_PASSWORD || "admin123456"}`);
      console.log(`üìù Provider: ${newAdmin.provider}`);
      console.log(`‚úÖ Email –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${newAdmin.isEmailVerified}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminCount = await User.countDocuments({ role: USER_ROLES.ADMIN });
    const totalUsers = await User.countDocuments();

    console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    console.log(`   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${adminCount}`);
    console.log(`   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
    const allAdmins = await User.find({ role: USER_ROLES.ADMIN })
      .select("email username provider isEmailVerified isActive createdAt")
      .sort({ createdAt: 1 });

    console.log("\nüë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:");
    allAdmins.forEach((admin, index) => {
      console.log(
        `   ${index + 1}. ${admin.email} (${
          admin.username || "–±–µ–∑ username"
        }) - ${admin.provider} - ${
          admin.isEmailVerified ? "–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" : "–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
        }`
      );
    });

    console.log("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É—è:");
    console.log(`   Email: ${adminData.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${adminData.password}`);
    console.log(`   –ú–µ—Ç–æ–¥: POST /api/auth/login`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:", error.message);

    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.code === 11000) {
      console.error(
        "   –ü—Ä–∏—á–∏–Ω–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
      );
    } else if (error.name === "ValidationError") {
      console.error("   –ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
      Object.keys(error.errors).forEach((field) => {
        console.error(`   - ${field}: ${error.errors[field].message}`);
      });
    }

    process.exit(1);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await mongoose.connection.close();
    console.log("\nüì¶ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ");
    process.exit(0);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
const createTestUser = async () => {
  try {
    const testUserData = {
      email: "test@example.com",
      password: "password123",
      username: "testuser",
      firstName: "Test",
      lastName: "User",
      provider: "local",
      role: USER_ROLES.USER,
      isActive: true,
      isEmailVerified: true, // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      isVerified: true,
    };

    const existingTestUser = await User.findOne({ email: testUserData.email });

    if (!existingTestUser) {
      const testUser = new User(testUserData);
      await testUser.save();
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${testUserData.email}`);
    } else {
      console.log(
        `‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${testUserData.email}`
      );
    }
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
      error.message
    );
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const createTestUserFlag = args.includes("--with-test-user");

const runScript = async () => {
  await createSuperAdmin();

  if (createTestUserFlag) {
    console.log("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    await createTestUser();
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
runScript();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export { createSuperAdmin, createTestUser };
